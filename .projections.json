{
  "*_live.ex": {
    "alternate": "test/{dirname}/live/{basename}_live_test.exs",
    "related": [
      "{dirname|dirname|dirname}/live/{dirname|basename}_live.html.leex"
    ],
    "template": [
      "defmodule Web.{basename|camelcase|capitalize}Live do",
      "  use Phoenix.LiveView",
      "",
      "  def render(assigns) do",
      "    ~L\"\"\"",
      "    <div class=\"\">",
      "      Hello from {basename}",
      "    </div>",
      "    \"\"\"",
      "  end",
      "",
      "  def mount(_params, _session, socket) do",
      "    {open}:ok, socket{close}",
      "  end",
      "end"
    ],
    "type": "live"
  },
  "*_view.ex": {
    "alternate": "test/{dirname}/views/{basename}_view_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}View do",
      "  use {dirname|camelcase|capitalize}, :view",
      "end"
    ],
    "type": "view"
  },
  "*eex": {
    "related": [
      "{dirname|dirname|dirname}/controllers/{dirname|basename}_controller.ex",
      "{dirname|dirname|dirname}/views/{dirname|basename}_view.ex"
    ],
    "template": [
      "<%# {basename} eex template %>"
    ],
    "type": "template"
  },
  "*leex": {
    "related": [
      "{dirname|dirname|dirname}/controllers/{dirname|basename}_controller.ex",
      "{dirname|dirname|dirname}/live/{dirname|basename}_live.ex"
    ],
    "template": [
      "<%# {basename} leex template %>"
    ],
    "type": "template"
  },
  "lib/**/channels/*_channel.ex": {
    "alternate": "test/{dirname}/channels/{basename}_channel_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Channel do",
      "  use {dirname|camelcase|capitalize}, :channel",
      "end"
    ],
    "type": "channel"
  },
  "lib/**/controllers/*_controller.ex": {
    "alternate": "test/{dirname}/controllers/{basename}_controller_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Controller do",
      "  use {dirname|camelcase|capitalize}, :controller",
      "end"
    ],
    "type": "controller"
  },
  "lib/**/views/*_view.ex": {
    "alternate": "test/{dirname}/views/{basename}_view_test.exs",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}View do",
      "  use {dirname|camelcase|capitalize}, :view",
      "end"
    ],
    "type": "view"
  },
  "lib/*.ex": {
    "alternate": "test/{}_test.exs",
    "template": [
      "defmodule {camelcase|capitalize|dot} do",
      "end"
    ],
    "type": "source"
  },
  "test/**/channels/*_channel_test.exs": {
    "alternate": "lib/{dirname}/channels/{basename}_channel.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ChannelTest do",
      "  use {dirname|camelcase|capitalize}.ChannelCase, async: true",
      "",
      "  alias {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Channel",
      "end"
    ],
    "type": "test"
  },
  "test/**/controllers/*_controller_test.exs": {
    "alternate": "lib/{dirname}/controllers/{basename}_controller.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ControllerTest do",
      "  use {dirname|camelcase|capitalize}.ConnCase, async: true",
      "end"
    ],
    "type": "test"
  },
  "test/**/features/*_test.exs": {
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Test do",
      "  use {dirname|camelcase|capitalize}.FeatureCase, async: true",
      "end"
    ],
    "type": "feature"
  },
  "test/**/views/*_view_test.exs": {
    "alternate": "lib/{dirname}/views/{basename}_view.ex",
    "template": [
      "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ViewTest do",
      "  use ExUnit.Case, async: true",
      "",
      "  alias {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}View",
      "end"
    ],
    "type": "test"
  },
  "test/*_test.exs": {
    "alternate": "lib/{}.ex",
    "template": [
      "defmodule {camelcase|capitalize|dot}Test do",
      "  use ExUnit.Case, async: true",
      "",
      "  alias {camelcase|capitalize|dot}",
      "end"
    ],
    "type": "test"
  }
}
